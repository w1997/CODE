字体 和 文本 区别？
    答：大量的字体就构成了文本。

    对于文本的设置，常用的属性如下：
        text-indent  设置首行空两格   
        text-align  设置文本对齐方式  
        text-decoration 设置文本的修饰线
        line-height  设置文本的行高

    text-decoration：
        设置文本的修饰线
        underline  下划线
        overline  上划线  基本上没用
        line-throuth  删除线  
        none 没有修饰线

        注意的细节：
            1）a标签默认就有下划线，通常在页面中会去掉a标签默认的下划线，当鼠标放上去时，添加下划线，并且改变它的颜色。
            2）对于line-throuth 通常会用到电商网站中的原价上。

    text-indent：（不能给span设置）
        indent是缩进的意思，表示文本缩进。 首行空两格。
        em:是一个单位，表示一个汉字的高度，汉字是正方形，em也可以表示一个汉字的宽度。
    text-align:设置文本的对齐方式。常用属性如下：
        left 左对齐（默认值）
        center 居中（水平居中）；可以通过设置line-height的值与height的值相等，让文本垂直居中。
        right 右对齐
        justify 两端对齐只对英文有效
        注意细节：
            1）text-indent可以设置负值，向另一个方向缩进。
            2）对于网站的Logo，通常会写文本，然后把文本设置text-indent:-1000px  目的就是让它隐藏掉。
CSS中的层叠性：
    大部分网站中都是对body设置font属性？为什么？
        答：CSS中的属性，有一部分是有继承性，对于父元素设置了这个属性，子元素也会起作用。

    是不是所有的CSS属性都有继承性？
    答：不是的  body  div  不可能说每一个属性都有继承性。如果都有那么肯定就乱。

    那些CSS属性有继承性呢？
    答：关于字体的设置和关于文本的设置有继承性。其它的CSS属性是没有继承性的。

    具有继承性的属性如下：
        font-family
        font-size
        font-style
        font-weight
        font
        text-decoration
        text-align
        text-indent
        line-height
        color

    经典应用：
        1）对于body设置字体相关的属性。
    CSS中的层叠性：
        可以对一个标签，通过不同的方式，设置多种样式，哪一个样式起作用，这就是层叠性所研究的内容。

    结论：
        1）行内样式 > 内部样式    行内样式 > 外部样式    内部样式 = 外部样式（就近原则）
        2）ID > CLASS > P
        3）自身有的样式 > 继承的样式 
        4）通过特殊值进行比较  ID:100   CLASS:10   P:1   把钱加一块，谁多就以谁为准，如果一样多，就近原则
        5）可以使用!important 改变优先级。用的不多。了解就OK。
盒子模型
     一个HTML标签就是一个盒子。HTML中所有的盒子都是矩形的。

    一个网站就是一个个盒子堆起来的。一个盒子模型有如下几个部分组成：
        盒子中内容区域
        盒子的内填充区域
        盒子的边框区域
        盒子的外填充区域
        盒子的背景区域

    通过6个属性来设置一个盒子：
        width  表示内容区域的宽度
        height  表示内容区域的高度
        margin
        padding  padding: 50px;  表示四个方向的padding都是50px
        border
        background
        研究盒子模型就是研究上面的6大属性。

    width 和 height：
        表示盒子内容的宽度和高度。不是指盒子的宽度和高度。

        一个盒子在网页上占据的宽度：
            width+左右padding+左右border+左右的margin
        一个盒子在网页上占据的高度：
            height+上下padding+上下border+上下的margin

        在PC端一般都设置单位为px。
    
    border：
        盒子的边框。通常在CSS中，设置盒子的边框需要设置边框的粗细，边框样式，边框颜色。
        一个盒子的边框由border-widht, border-style, border-color组成。

        边框也是有四个方向：
        border-top, border-right, border-bottom, border-left。

        最的最多的就是直接border:1px solid red;  如果一个盒子仅仅有一个边框，那么我们也会设置这一边框。

    padding:
        内边距，也叫补白，表示盒子内容区域到边框的距离。

        padding也是有四个方向：
            padding-top
            padding-right
            padding-bottom
            padding-left
        
        padding后面的跟的值可以是：
            1个值： padding:10px  表示这个盒子的上右下左的内边距都是10px。
            2个值： 第1个值表示上下，第2个值表示左右。
            3个值： 第1个值表示上，第2个值表示左右，第3个值表示下。
            4个值： 顺序是上，右，下，左

    margin：
        外边距，使用margin表示盒子与盒子之间的距离。

        margin也是有四个方向：
            margin-top
            margin-right
            margin-bottom
            margin-left

        margin后面的跟的值可以是：
        1个值：  margin:10px  表示这个盒子的上右下左的外边距都是10px。
        2个值： 第1个值表示上下，第2个值表示左右。
        3个值： 第1个值表示上，第2个值表示左右，第3个值表示下。
        4个值： 顺序是上，右，下，左

    很多标签都有默认的margin和padding，不方便写CSS，所以都会直接把默认margin和padding去掉。

    background:
        用来设置盒子的背景：
            背景颜色
            背景图片

        背景颜色： background-color
            背景颜色会填充一个盒子的内容区域和padding区域，以及边框。

        背景图片：background-image
            url()函数，表示用来指定一个背景图片的路径的，()里面可以加"",也可以不加。
            默认情况下，一个盒子的背景图片，会平铺一个盒子，在水平和垂直方向上都会平铺。
            可以通过一个属性，来指定是否平铺，叫backgroud-repeat

            默认情况下，背景图片的左上角和盒子的padding的左上角是对齐。 
            可以通过一个属性，来指定背景图片的位置，叫background-position

    总结：
        1）盒子模型是CSS中一个非常重要的核心。
        2）只是一个HTML标签，它就是一个盒子。
        3）学习盒子模型，主要就是研究盒子模型设置6大属性。
        4）width   height   padding   border   margin  background
        5）后面会深入学习盒子模型的6大属性\


盒子模型深入总结
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <title>让块级标签并排显示并且设置间隙</title>
        <style>
            *{margin:0;padding:0}
            .father{
                height: 460px;
                width:460px;
                border: 1px solid gray;
            }
            .son{
                height:100px;
                width: 100px;            
            }
        </style>
    </head>
    <body>
        <div class="father">
            <div style="background-color: red;" class="son">son1</div>
            <div style="background-color: gold;" class="son">son2</div>
            <div style="background-color: green;" class="son">son3</div>
            <div style="background-color: blue;" class="son">son4</div>
        </div>
    </body>
    </html>
    如果只对父元素和子元素设置width和height，在页面上就可以看到不同颜色的子元素按照列的形式显示，并且它们之间并没有间隙。
    如何让这些子元素并排显示呢？
         对子元素设置如下代码：
         (1)display:inline-block;(此时会发现盒子可以并排显示，但是盒子并不是所有的盒子都在一排，并且盒子之间有间隙)
         (2)float: left;(此时会发现盒子并排显示，盒子与盒子之间并没有间隙)
        当用inline-block布局是我们需要先解决盒子间隙问题:
            在父元素中设置font-size:0;就可以发现盒子之间的间隙没有了，但是盒子里的文字也没有了，此时在子元素在设置font-size:14px;文字就会出现。
                在盒子中的文本是不居中的，如果想要文本居中，就在子元素中设置text-align: center;

    如何让这些子元素之间有相同的间隙？
        我们事先已经规定了父元素和子元素的宽度，如果直接设置margin-right: 20px,就会发现盒子不能并列显示，这是为什么呢？
        是因为盒子的宽度width+外边距margin-right的值已经超过了父元素的宽度。
        如何设置呢？
            方法一：再给最后一个子元素设置为margin-right:0px;
            方法二：再给最后一个子元素设置为margin-right:-20px;
    完成以上操作就解决问题了。
浮动总结
        浮动在CSS也是相当重要。
    如果不使用浮动，只按照标签的特征，进行的默认布局，从上到下，从左到右进行排列，块级元素独占一行，行内元素并排显示，这种布局方案叫流式布局。流式布局就是遵循标准文档流进行的布局方案。
        不足：不能让块级标签并排显示。
浮动的初衷
    浮动刚创建出来时，并不是为了实现块级元素并排显示的，是实现所谓的字围效果，即让文字绕着图片显示。由于文字是环绕在图片周围，所以浮动半脱离标准文档。如果是全脱离标准文档流，文字都会直接钻上去。
    但是，现在我们使用浮动，并不是为了字围效果，而是使用浮动让块级元素可以并排显示，进行网页的布局。
    如果不使用浮动，只按照标签的特征，进行的默认布局，从上到下，从左到右进行排列，块级元素独占一行，行内元素并排显示，这种布局方案叫流式布局。流式布局就是遵循标准文档流进行的布局方案。
        不足：不能让块级标签并排显示。
浮动布局：可以让块级元素在同一行上并排显示。 
        让一个块级元素在同一行并排显示的方案比较多，浮动仅仅是其中的一个方案而已。
        一个元素浮动了，它并没有脱离父元素。
        如果一个父元素中的子元素都浮动了，儿子都出国了，就不能撑起父元素了，父元素的高度就变了0，也就是所谓的父元素高度塌陷。
        也就是说对父元素的高度造成了影响，清除这种影响，也就是如何清除浮动，可以使用overflow:hidden 。

浮动的特性  
    破坏性:破坏了流式布局，可以让块级元素并排显示。
    在CSS3中，提出更好的一种布局方案，叫flex布局。在移动端（手机，平板）开发，可以使用flex来代替浮动布局。
    字围效果:两个div，在没有设置的情况下，由于都是块级标签，所以会各自独占一行。如果上面的div发生浮动，下面的div就会钻上去，但是如果下面的div中有文字，文字没办法钻上去，会在原位不动。
    贴靠性:两个div，如果都向一个方向浮动，它们两个就会贴靠在一起，此时两个div就并排显示了。
    浮动的块级元素具有包裹性：必须是块级元素，并且这个块级元素没有明确的设置尺寸。如果一个块级元素的width没有设置，它的宽度就是父元素的宽度的100%。如果此时让它浮动了，它的宽度由内容来决定，尽可能地压缩空间。这就是块级元素浮动所产生的包裹性。里面有多少内容，它的宽度就是多少。
    浮动的行内元素会变成块级元素：一个行内元素浮动了，相当于做了一个变性手术，变了块级元素。
            对于一个行内元素，不能设置宽度和高度。但是如果你让它浮动了，那它就变成一块级元素，可以设置宽高。

    对于下面的代码，就显示的比较low了：
        span{
            float: left;   // 因为float:left就可以让span变成块级标签
            display: block;   // 此行代码是多余的
            width: 80px;
            height: 80px;
            background-color: gold;
        }
右浮动的元素写在前面：
        如果盒子中只有右浮动，没有左浮动，效果会有错行的效果。解决：把右浮动的元素写在前面。
        如果有左浮动，也有右浮动，那么谁写在前面（左浮动的元素或是右浮动的元素）都OK的。
浮动的理解：
        一个浮动的元素只会对它后面的元素造成影响，不可能对它前面的元素造成影响。
        一个右浮动的元素，先向上飘，飘到父元素边界时停止，然后向右飘，飘到父元素的边界就停止了。
    记住几句话：
        1）浮动的元素只会对它后面的元素造成影响
        2）如果一个块级元素没有浮动，这个元素肯定会独占一行
        3）浮动步骤：先上向  再向左/向右  停止 
        4）两个浮动的元素会并排显示
浮动元素仍然受父元素的控制与浮动元素的贴靠性：
        当父元素的宽度变小时，浮动的元素也会换行，但是它不可以浮动到父元素的外面。也就是说浮动元素仍然受父元素的控制。
    贴靠性：
        当元素向同一个方向浮动，它们会紧紧在贴在一起，当父元素宽度变小时，老三贴不了老二，它会贴老大，前提是可能贴到老大上面，如果老大没有条件让它贴靠，它会贴父元素。
浮动元素超出父元素的高度，也会对后面的元素造成影响：
    解决：在受影响元素上面加上clear:both。
如果一个父元素中的子元素都浮动了，父元素在没有设置高度的情况下，会塌陷。
清除浮动概述：
        浮动会造成影响，包含对两个方面的影响：
        1）对后面的兄弟元素造成影响；
        2）父元素造成影响：造成父元素的高度塌陷。
    解决对后面的兄弟元素造成影响：
        clear 解决对兄弟元素造成影响。 谁受影响了，就在谁的身上加上clear。
            clear取值：
                left ：清除左浮动所造成的影响。  代表后面的元素也不受影响。 只能清除左浮动所造成的影响，不能清除右浮动所造成的影响。
                right : 清除右浮动所造成的影响。只对右浮动有效。
                both : 清除左右浮动所造成的影响。 开发中，直接使用both就OK。
                none ： 默认值，表示不清除这种影响。

                    注意点：
                        一个浮动的元素只能影响它后面的元素，前面的元素是影响不到的。
                        一个块级元素没有浮动，它肯定会独占一行的。
                        clear只能作用于块级元素，对于行内元素是没有效果。
     解决对父元素造成的影响：
          1）加高法   并不好   把高度限定死  往往高度是靠内容撑起来的   如果一个页面中高度是固定死的，也可以使用加高法。
          2）overflow:hidden 小偏方  最终的高度也是内容撑起的
             overflow：本意是用来处理溢出的。
                overflow取值：
                    hidden 溢出的内容会被隐藏掉，不可见。
                    scroll 溢出的内容 产生滚动条 通过滚动条可到全部的内容
                    visible 默认值  溢出的内容正常显示
                        溢出的内容的内容不占见面空间。
          3）让父元素也浮动起来
          4）使用clear清除对父元素造成的影响(内墙法)：
            1.给父元素添加一个子元素  这个子元素不浮动，添加到最后。
            2.给这个元素加上clear:both 
            真实开发中，我们会使用after伪元素来清除浮动：
                伪类选择器：不存在的一个类  :hover
                伪元素：页面中不存在的一个元素      
            after伪元素：
                .father:after  表示在father元素的内部最后添加一个元素
                创建出来的伪元素默认并不是块级的，clear只能作用块级元素，所以说需要给这个伪元素添加display:block
                .father:after{
                    content:"hello";   新增加元素中的内容
                    clear: both;   用来清除浮动的
                    display: block;  让伪元素变成块级，默认是inline
                }
            提炼出一个清除浮动的类：
                .clearfix:after{
                    content: "";
                    clear: both;
                    display: block;
                }
                通常写法：
                .clearfix:after{
                    display: block;
                    content: "";
                    overflow:hidden;
                    height:0;
                    clear: both;
                    visibility: hidden;
                }
                .clearfix{*zoom:1}
浮动的应用场景：
        1）页面中的左右结构
            实现： 
                父元素  .clearfix
                    左  float:left
                    右  float:right
        2）页面中多列布局
            实现：
                父元素     .clearfix
                    第1列  float:left
                    第2列  float:left
                    第3列  float:left
                    第4列  float:left
                    ..       
                    每一列中间的间隙。margin-right  
                    中间1px边框的问题  margin负值           
        3）左侧固定宽度，右侧自适应
            实现：
                父元素：  当父元素的宽度变化时，那么右侧的宽度也跟着变化
                    左侧  宽度必须  浮动 
                    右侧  margin-left
        4）页面中的左中右结构
            实现 
                父元素： 不需要清除浮动
                    左：左浮动
                    中： text-align:center;  margin:0 auto;
                    右：右浮动   